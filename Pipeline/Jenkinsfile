pipeline {
    agent none
    stages {
        stage('Test Server') {
            agent {
                docker {
                    image '192.168.160.99:5000/esp54-maven_agent'
                    registryUrl 'https://192.168.160.99:5000'
                    args '-v /root/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock --network esp54-tests -v /dev/shm:/dev/shm'
                }
            }
            steps {
                dir('Server/stickman_charades') {
                    sh '''
                        set +e

                        docker stop esp54-kafka-tests && docker rm esp54-kafka-tests

                        docker run -d --env ADVERTISED_HOST=kafka --env ADVERTISED_PORT=9092 --name esp54-kafka-tests --network esp54-tests --network-alias kafka spotify/kafka

                        sleep 5

                        KAFKA_HOST=kafka KAFKA_PORT=9092 mvn clean verify
                        tests_exit_code=$?
                        
                        docker stop esp54-kafka-tests && docker rm esp54-kafka-tests

                        if [ $tests_exit_code -ne 0 ] ; then
                            exit $tests_exit_code
                        fi
                    '''
                }
            }
        }
        stage('Test Web') {
            agent any
            steps {
                dir ('Angular/stickman-charades') {
                    sh 'echo Skipping...'
                }
            }
        }
        stage('Test Desktop') {
            agent any
            steps {
                dir('Unity/StickmanCharades') {
                    sh 'echo Skipping...'
                }
            }
        }
        stage('Build Server') {
            agent any
            when {
                branch 'master'
            }
            steps {
                dir('Server/stickman_charades') {
                    sh '''
                        mvn clean package -Dmaven.test.skip=true

                        docker build -t esp54-server .
                    '''
                }
            }
        }
        stage('Build Web') {
            agent any
            when {
                branch 'master'
            }
            steps {
                dir('Angular/stickman-charades') {
                    sh 'docker build -t esp54-web --file Dockerfile-prod .'
                }
            }
        }
        stage('Build Desktop') {
            agent any
            when {
                branch 'master'
            }
            steps {
                sh 'echo Skipping...'
            }
        }
        stage('Publish Server') {
            agent any
            when {
                branch 'master'
            }
            steps {
                dir('Server/stickman_charades') {
                    configFileProvider([configFile(fileId: 'esp54-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                        sh '''
                            mvn clean deploy --settings $MAVEN_SETTINGS -Dmaven.test.skip=true

                            docker tag esp54-server 192.168.160.99:5000/esp54-server
                            docker push 192.168.160.99:5000/esp54-server
                        '''
                    }
                }
            }
        }
        stage('Publish Web') {
            agent any
            when {
                branch 'master'
            }
            steps {
                dir('Angular/stickman-charades') {
                    sh '''
                        docker tag esp54-web 192.168.160.99:5000/esp54-web
                        docker push 192.168.160.99:5000/esp54-web
                    '''
                }
            }
        }
        stage('Publish Desktop') {
            agent any
            when {
                branch 'master'
            }
            steps {
                sh 'echo Skipping...'
            }
        }
        stage('Deploy Server') {
            agent any
            when {
                branch 'master'
            }
            steps {
                sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                            docker stop esp54-server && docker rm esp54-server || echo No container up. Continue
                            docker pull 192.168.160.99:5000/esp54-server
                            docker run -p 54880:8080 -d --name=esp54-server \
                                --network shared_postgres \
                                -e PERSISTENCE_HOST=db \
                                -e PERSISTENCE_PORT=5432 \
                                -e PERSISTENCE_DB=esp54 \
                                -e PERSISTENCE_USER=esp54 \
                                -e PERSISTENCE_PASSWORD=esp54 \
                                -e KAFKA_HOST=192.168.160.103 \
                                -e KAFKA_PORT=9092 \
                                192.168.160.99:5000/esp54-server
                        "
                    '''
                }
            }
        }
        stage('Deploy Web') {
            agent any
            when {
                branch 'master'
            }
            steps {
                sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                            docker stop esp54-web && docker rm esp54-web || echo No container up. Continue
                            docker pull 192.168.160.99:5000/esp54-web
                            docker run -p 54080:80 -d --name=esp54-web 192.168.160.99:5000/esp54-web
                        "
                    '''
                }
            }
        }
    }
}
