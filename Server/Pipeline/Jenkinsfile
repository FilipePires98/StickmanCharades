pipeline {
    parameters {
        booleanParam(
            name: 'build_and_publish',
            defaultValue: false,
            description: 'Build and publish docker image'
        )
    }
    agent any
    environment {
        VERSION_DATABASE_SERVICE = """${sh(
            returnStdout:true,
            script: 'sed -e \'s/xmlns=".*"//g\' Server/database_service/pom.xml | xmllint --xpath "//project/version/text()" -'
        )}"""
        VERSION_EVENT_HANDLER = """${sh(
            returnStdout:true,
            script: 'sed -e \'s/xmlns=".*"//g\' Server/event_handler/pom.xml | xmllint --xpath "//project/version/text()" -'
        )}"""
        VERSION_KAFKA_TRANSLATOR = """${sh(
            returnStdout:true,
            script: 'sed -e \'s/xmlns=".*"//g\' Server/kafka_translator/pom.xml | xmllint --xpath "//project/version/text()" -'
        )}"""
        VERSION_SESSION_COMMANDS = """${sh(
            returnStdout:true,
            script: 'sed -e \'s/xmlns=".*"//g\' Server/session_commands/pom.xml | xmllint --xpath "//project/version/text()" -'
        )}"""
    }
    stages {
        stage('Test') {
            when {
                not {
                    branch 'master'
                }
            }
            agent {
                docker {
                    image '192.168.160.99:5000/esp54-server_pipeline_agent'
                    registryUrl 'https://192.168.160.99:5000'
                    args '-v /root/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock -v /dev/shm:/dev/shm --network esp54-tests --entrypoint=""'
                }
            }
            stages {
                stage('Setup kafka') {
                    steps {
                        dir('Server/database_service') {
                            sh '''
                                docker stop esp54-kafka-tests || echo "No container running"
                                docker rm esp54-kafka-tests || echo "No container"

                                docker run -d \
                                    --network esp54-tests --network-alias kafka \
                                    --env ADVERTISED_HOST=kafka --env ADVERTISED_PORT=9092 \
                                    --name esp54-kafka-tests spotify/kafka
                            '''
                        }
                    }
                }
                stage('Database Service') {
                    steps {
                        dir('Server/database_service') {
                            retry(5) {
                                sh 'KAFKA_BOOTSTRAP_SERVERS=kafka:9092 mvn clean verify'
                            }
                        }
                    }
                }
                stage('Event Handler') {
                    steps {
                        dir('Server/event_handler') {
                            retry(5) {
                                sh 'KAFKA_BOOTSTRAP_SERVERS=kafka:9092 mvn clean verify'
                            }
                        }
                    }
                }
                stage('Kafka Translator') {
                    steps {
                        dir('Server/kafka_translator') {
                            retry(5) {
                                sh 'KAFKA_BOOTSTRAP_SERVERS=kafka:9092 mvn clean verify'
                            }
                        }
                    }
                }
                stage('Session Commands') {
                    steps {
                        dir('Server/session_commands') {
                            retry(5) {
                                sh 'KAFKA_BOOTSTRAP_SERVERS=kafka:9092 mvn clean verify'
                            }
                        }
                    }
                }
            }
            post {
                always {
                    sh'''
                        docker stop esp54-kafka-tests || echo "No container running"
                        docker rm esp54-kafka-tests || echo "No container"
                    '''
                }
            }
        }
        stage('Build & Publish') {
            when {
                anyOf {
                    not {
                        branch 'master'
                    }
                    expression { params.build_and_publish }
                }
            }
            failFast true
            parallel {
                stage('Database Service') {
                    agent any
                    steps {
                        dir('Server/database_service') {
                            configFileProvider([configFile(fileId: 'esp54-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                                sh '''
                                    mvn clean deploy --settings $MAVEN_SETTINGS -Dmaven.test.skip=true

                                    docker build -t esp54-server-database_service:$VERSION_DATABASE_SERVICE .

                                    docker tag esp54-server-database_service:$VERSION_DATABASE_SERVICE 192.168.160.99:5000/esp54-server-database_service:$VERSION_DATABASE_SERVICE
                                    docker push 192.168.160.99:5000/esp54-server-database_service:$VERSION_DATABASE_SERVICE
                                '''
                            }
                        }
                    }
                }
                stage('Event Handler') {
                    agent any
                    steps {
                        dir('Server/event_handler') {
                            configFileProvider([configFile(fileId: 'esp54-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                                sh '''
                                    mvn clean deploy --settings $MAVEN_SETTINGS -Dmaven.test.skip=true

                                    docker build -t esp54-server-event_handler:$VERSION_EVENT_HANDLER .

                                    docker tag esp54-server-event_handler:$VERSION_EVENT_HANDLER 192.168.160.99:5000/esp54-server-event_handler:$VERSION_EVENT_HANDLER
                                    docker push 192.168.160.99:5000/esp54-server-event_handler:$VERSION_EVENT_HANDLER
                                '''
                            }
                        }
                    }
                }
                stage('Kafka Translator') {
                    agent any
                    steps {
                        dir('Server/kafka_translator') {
                            configFileProvider([configFile(fileId: 'esp54-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                                sh '''
                                    mvn clean deploy --settings $MAVEN_SETTINGS -Dmaven.test.skip=true

                                    docker build -t esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR .

                                    docker tag esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR 192.168.160.99:5000/esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR
                                    docker push 192.168.160.99:5000/esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR
                                '''
                            }
                        }
                    }
                }
                stage('Session Commands') {
                    agent any
                    steps {
                        dir('Server/session_commands') {
                            configFileProvider([configFile(fileId: 'esp54-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                                sh '''
                                    mvn clean deploy --settings $MAVEN_SETTINGS -Dmaven.test.skip=true

                                    docker build -t esp54-server-session_commands:$VERSION_SESSION_COMMANDS .

                                    docker tag esp54-server-session_commands:$VERSION_SESSION_COMMANDS 192.168.160.99:5000/esp54-server-session_commands:$VERSION_SESSION_COMMANDS
                                    docker push 192.168.160.99:5000/esp54-server-session_commands:$VERSION_SESSION_COMMANDS
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                branch 'master'
            }
            failFast true
            parallel {
                stage('Database Service') {
                    agent any
                    steps {
                        sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                            sh '''
                                ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                                    docker pull 192.168.160.99:5000/esp54-server-database_service:$VERSION_DATABASE_SERVICE
                                    docker stop esp54-server-database_service && docker rm esp54-server-database_service || echo No container up. Continue
                                    docker run -p 54882:8082 -d --name=esp54-server-database_service \
                                        --network shared_postgres \
                                        --network bridge \
                                        -e PERSISTENCE_HOST=db \
                                        -e PERSISTENCE_PORT=5432 \
                                        -e PERSISTENCE_DB=esp54 \
                                        -e PERSISTENCE_USER=esp54 \
                                        -e PERSISTENCE_PASSWORD=esp54 \
                                        -e KAFKA_BOOTSTRAP_SERVERS=192.168.160.103:9092 \
                                        -e LOGGING_HOST=192.168.160.103 \
                                        -e LOGGING_PORT=9200 \
                                        -e LOGGING_USER=esp54 \
                                        -e LOGGING_PASSWORD=passwordesp54 \
                                        -e LOGGING_INDEX=esp54-logs \
                                        -e MONITORING_HOST=192.168.160.103 \
                                        -e MONITORING_PORT=8125 \
                                        192.168.160.99:5000/esp54-server-database_service:$VERSION_DATABASE_SERVICE
                                "
                            '''
                        }
                    }
                }
                stage('Event Handler') {
                    agent any
                    steps {
                        sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                            sh '''
                                ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                                    docker pull 192.168.160.99:5000/esp54-server-event_handler:$VERSION_EVENT_HANDLER
                                    docker stop esp54-server-event_handler && docker rm esp54-server-event_handler || echo No container up. Continue
                                    docker run -p 54883:8083 -d --name=esp54-server-event_handler \
                                        --network shared_postgres \
                                        --network bridge \
                                        -e KAFKA_BOOTSTRAP_SERVERS=192.168.160.103:9092 \
                                        -e LOGGING_HOST=192.168.160.103 \
                                        -e LOGGING_PORT=9200 \
                                        -e LOGGING_USER=esp54 \
                                        -e LOGGING_PASSWORD=passwordesp54 \
                                        -e LOGGING_INDEX=esp54-logs \
                                        -e MONITORING_HOST=192.168.160.103 \
                                        -e MONITORING_PORT=8125 \
                                        192.168.160.99:5000/esp54-server-event_handler:$VERSION_EVENT_HANDLER
                                "
                            '''
                        }
                    }
                }
                stage('Kafka Translator') {
                    agent any
                    steps {
                        sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                            sh '''
                                ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                                    docker pull 192.168.160.99:5000/esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR
                                    docker stop esp54-server-kafka_translator && docker rm esp54-server-kafka_translator || echo No container up. Continue
                                    docker run -p 54884:8084 -d --name=esp54-server-kafka_translator \
                                        --network shared_postgres \
                                        --network bridge \
                                        -e KAFKA_BOOTSTRAP_SERVERS=192.168.160.103:9092 \
                                        -e LOGGING_HOST=192.168.160.103 \
                                        -e LOGGING_PORT=9200 \
                                        -e LOGGING_USER=esp54 \
                                        -e LOGGING_PASSWORD=passwordesp54 \
                                        -e LOGGING_INDEX=esp54-logs \
                                        -e MONITORING_HOST=192.168.160.103 \
                                        -e MONITORING_PORT=8125 \
                                        192.168.160.99:5000/esp54-server-kafka_translator:$VERSION_KAFKA_TRANSLATOR
                                "
                            '''
                        }
                    }
                }
                stage('Session Command') {
                    agent any
                    steps {
                        sshagent(credentials: ['esp54-ssh-runtime-vm']) {
                            sh '''
                                ssh -o StrictHostKeyChecking=no -l esp54 192.168.160.103 "
                                    docker pull 192.168.160.99:5000/esp54-server-session_commands:$VERSION_SESSION_COMMANDS
                                    docker stop esp54-server-session_commands && docker rm esp54-server-session_commands || echo No container up. Continue
                                    docker run -p 54885:8085 -d --name=esp54-server-session_commands \
                                        --network shared_postgres \
                                        --network bridge \
                                        -e KAFKA_BOOTSTRAP_SERVERS=192.168.160.103:9092 \
                                        -e LOGGING_HOST=192.168.160.103 \
                                        -e LOGGING_PORT=9200 \
                                        -e LOGGING_USER=esp54 \
                                        -e LOGGING_PASSWORD=passwordesp54 \
                                        -e LOGGING_INDEX=esp54-logs \
                                        -e MONITORING_HOST=192.168.160.103 \
                                        -e MONITORING_PORT=8125 \
                                        192.168.160.99:5000/esp54-server-session_commands:$VERSION_SESSION_COMMANDS
                                "
                            '''
                        }
                    }
                }
            }
        }
    }
}
